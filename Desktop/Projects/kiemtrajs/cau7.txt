// 7. Sorting Objects
// Prompt
// Given an array of objects, sort the objects by population size.Return the entire object.
//     Approach
// What is our Input ?
//     An array of objects

// What is Our Output ?
//     An array of objects, sorted by population

// SortObjects Plan
// JavaScript has a built -in array method called sort() that we can use for this particular exercise.
//     What’s interesting about this particular method is that in JavaScript, if you don’t use a callback compare function to sort the array of objects, the default sort method is used to sort by characters rather than number.For example:
// const sortNumbers = (arr) => {
//     return arr.sort();
// }
// console.log(sortNumbers([1, 11, 27, 2, 34, 123])); // [ 1, 11, 123, 2, 27, 34 ]
// We need to use a compare function as a callback passed into the sort method to make sure that the actual numbers are treated properly.
//     Explanation
// To sort an array of objects by a certain property, we have to use the compare function as a parameter in the built -in sort method in JavaScript.
// The compare function takes in two parameters: here they are named a and b.They represent two objects next to each other in our array.If a and b are both objects, we can use dot notation to access the property population.
// If we want to be sure that the array has objects sorted by population in increasing order, we evaluate a.population - b.population.If it’s - 1, it will put the list in decreasing order by population.The opposite would put it in increasing order.If the expression happens to evaluate to 0, it means that the two patterns are equal to the other.

//Your code here:
let employees = [
  {
    firstName: "John",
    lastName: "Doe",
    age: 27,
    joinedDate: "December 15, 2017",
  },

  {
    firstName: "Ana",
    lastName: "Rosy",
    age: 25,
    joinedDate: "January 15, 2019",
  },

  {
    firstName: "Zion",
    lastName: "Albert",
    age: 30,
    joinedDate: "February 15, 2011",
  },
];
// Sort an array of objects by numbers
employees.sort((a, b) => {
  return a.age - b.age;
});
employees.forEach((e) => {
  console.log(`${e.firstName} ${e.lastName} ${e.age}`);
});
//===================================
employees.sort((a, b) => b.age - a.age);

employees.forEach((e) => {
  console.log(`${e.firstName} ${e.lastName} ${e.age}`);
});
// Sort an array of objects by strings
employees.sort((a, b) => {
  let fa = a.firstName.toLowerCase(),
    fb = b.firstName.toLowerCase();

  if (fa < fb) {
    return -1;
  }
  if (fa > fb) {
    return 1;
  }
  return 0;
});
employees.forEach((e) => {
  console.log(`${e.firstName} ${e.lastName}`);
});
// Sort an array of objects by dates
employees.sort((a, b) => {
    let da = new Date(a.joinedDate),
        db = new Date(b.joinedDate);
    return da - db;
});
employees.forEach((e) => {
    console.log(`${e.firstName} ${e.lastName} ${e.joinedDate}`);
});


